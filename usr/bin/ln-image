#!/bin/bash

PROGNAME=${0##*/}

#set -x

. /etc/default/livenet

[ -f /etc/default/livenet.override ] && . /etc/default/livenet.override
#[ -z "${NFSIMAGES}" ] && NFSIMAGES=/images

#bootstrap cache
CACHE=${IMAGES}/.cache

# recall LASTIMAGE
if [ -f ${CACHE} ]; then
   . ${CACHE}
else
   LASTIMAGE=$(find  ${IMAGES}  -maxdepth 1 -type d -exec basename \{\} \; | sed 's/-diff//' | sort | head -n1)
   [ -n "${LASTIMAGE}" ] && echo "LASTIMAGE=${LASTIMAGE}" > ${CACHE}
fi

INTERFACE=${INTERFACE:=ens3}

logo(){

    printf '%s\n' '    __  _                           _   '
    printf '%s\n' '  / / (_)__   __ ___  _ __    ___ | |_ '
    printf '%s\n' ' / /  | |\ \ / // _ \| `_ \  / _ \| __|'
    printf '%s\n' '/ /___| | \ V /|  __/| | | ||  __/| |_ '
    printf '%s\n' '\____/|_|  \_/  \___||_| |_| \___| \__|'
    printf '%s\n' ''

}

usage()
{
logo

  cat << EOF
    Options:
	Get info
        --list: 		   		list available images
	--diff <image_name>			show differents from image and latest commit
	--log <image_name>			list of all commit 

	Edit and create
        --name <image_name>        		edit client image
        --commit <image_name>      		commit image changes
        --rollback <image_name>    		rollback image changes
        --new-image <image_name>  --create: 	create image
	--clone <image_name> <new_image>	create new image from exist image without commit 
	--rmcommit <image_name> 		remove latest commit
	--rmimage <image>			remove image

        Tools for client install
	--backup <image_name>      		build initial install image
        --iso  					build boot iso image
        --help : 				show this messge  
EOF
}

SHORTOPTS="hvn:"
LONGOPTS="help,version,backup,commit,snap,name:,list,iso,rmcommit,rmimage,clone,rollback,diff,log,create,arch:,distr:,new-image:,create-states:,cache"

ARGS=$(getopt -s bash --options $SHORTOPTS --longoptions $LONGOPTS --name $PROGNAME -- "$@" )
eval set -- "$ARGS"

NAME=${LASTIMAGE}
ARCH=amd64
DISTR=bionic

do_create() {

start_time=$(date +%s)

#set -x
IMAGE=$1
echo $start_time "Start ${IMAGE} building" >> ${BASE}/livenet.log


R=${IMAGES}/${NAME}

# TODO
# fstab overlay
# grep -q ${R}-dev /etc/fstab || (
# cat >> /etc/fstab <<QQFS

# # ${NAME}
# none ${R}-dev overlay noauto,x-systemd.automount,lowerdir=${R},upperdir=${R}-diff 0 0
# ${R}/boot ${BOOT}/${NAME} none auto,bind 0 0

# QQFS
# )


echo "Create mount point for boot directory "
mkdir -p ${BOOT}/${NAME}
if [ -f ${IMAGES}/${NAME} ]; then
    echo " ${IMAGES}/${NAME} already exists"
    exit 1
fi

echo "Create volume for ZFS "
zfs create ${LNPZFS}/${LNVZFS}/${LNIMAGES}/${NAME}
#zfs allow lnsrvsend send ${LNPZFS}/${LNVZFS}/${LNIMAGES}/${NAME}

mount -o remount,exec,dev ${IMAGES}/${NAME}

# schroot configuration
grep -q "\[${NAME}-dev\]" /etc/schroot/schroot.conf || (
cat >> /etc/schroot/schroot.conf <<QQSCHROOT

[${NAME}]
type=directory
profile=livenet
description=livenet gold
directory=${IMAGES}/${NAME}

QQSCHROOT

)

# image build
if [ -n "${COPY_FROM_CACHE}" ]; then
    cp -a ${IMAGES}/${NAME}.cache ${IMAGES}/${NAME}
else
    debootstrap --arch ${ARCH} ${DISTR} ${IMAGES}/${NAME} http://archive.ubuntu.com/ubuntu/
fi

# now make some operations to prepare nicer chroot

# hosts
cat > ${R}/etc/hosts <<QWK
127.0.0.1   localhost livenet-client
${HOSTIP} livenet-host
::1     localhost ip6-localhost ip6-loopback
ff02::1     ip6-allnodes
ff02::2     ip6-allrouters
QWK

# set sources.list
cat > ${R}/etc/apt/sources.list <<QWE
#############################################################
################### OFFICIAL UBUNTU REPOS ###################
#############################################################

###### Ubuntu Main Repos
deb http://archive.ubuntu.com/ubuntu/ ${DISTR} main restricted universe multiverse 

###### Ubuntu Update Repos
deb http://archive.ubuntu.com/ubuntu/ ${DISTR}-security main restricted universe multiverse 
deb http://archive.ubuntu.com/ubuntu/ ${DISTR}-updates main restricted universe multiverse 

###### Ubuntu Partner Repo
deb http://archive.canonical.com/ubuntu ${DISTR} partner
QWE

# for nfs mode
echo 'rootfs / rootfs rw 0 0' > ${R}/etc/mtab

# hostname is checked to check chroot environment (see /usr/sbin/policy-rc.d) 
echo livenet-client > ${R}/etc/hostname

# debian_chroot to have nicer prompt
chroot ${R} lsb_release -c | awk '{print $2}' > ${R}/etc/debian_chroot

# adjust language locale environment
echo "Updating packages ..."
chroot ${R} apt-get -q update >/dev/null
chroot ${R} apt-get -y -q install locales dialog
chroot ${R} locale-gen en_GB.UTF-8
chroot ${R} locale-gen it_IT.UTF-8
chroot ${R} update-locale LANG=it_IT.UTF-8 LANGUAGE=it:en_US:en

# adjust timezone (later run dpkg-reconfigure tzdata)
echo Europe/Rome > ${R}/etc/timezone
cp ${R}/usr/share/zoneinfo/Europe/Rome ${R}/etc/localtime

# avoid startup of services into chroot
cat > ${R}/usr/sbin/policy-rc.d <<QWE
#!/bin/sh

# dpkg/apt not start any daemons when things are installed in the chroot

if [ ! "\\\`cat /etc/hostname\\\`" = "\\\`hostname\\\`" ]; then
    exit 101
fi
QWE
chmod +x ${R}/usr/sbin/policy-rc.d

#TODO
# add ppa livenet
#echo "deb http://ppa.launchpad.net/livenet/client/ubuntu bionic main" > ${R}/etc/apt/sources.list.d/livenet-client-xenial.list
#chroot ${R} gpg --ignore-time-conflict --no-options --no-default-keyring --homedir /tmp/tmp.rpBbGhvMOp --no-auto-check-trustdb --trust-model always --keyring /etc/apt/trusted.gpg.d/livenet-client.gpg --primary-keyring /etc/apt/trusted.gpg.d/livenet-client.gpg --keyserver keyserver.ubuntu.com --recv-keys 1A9F6095

echo "Updating packages ..."
#chroot ${R} apt-get -q update >/dev/null
export DEBIAN_FRONTEND=noninteractive
mount -t proc none ${R}/proc

chroot ${R} apt-get -y install linux-generic
umount ${R}/proc

#chroot ${R} apt-get -y install livenet-client
echo "Installing livenet-client"
chroot ${R} apt install -y git wget curl vim nano rsync nfs-common initramfs-tools python-passlib pv screen byobu lsof pigz nfs-common libpam-script xloadimage conntrack zfsutils-linux zfs-initramfs

chroot ${R} /bin/bash -c "git clone https://github.com/scipioni/livenet-client.git /tmp/livenet-client"

chroot ${R} /bin/bash -c "cd /tmp/livenet-client; git checkout bionic; rsync -av etc/ /etc/; rsync -av usr/ /usr/; rm -r /tmp/livenet-client/"

echo FROM=${NAME} > /root/FROM
systemctl enable ln-grub
LIVENET_ROOT_IP=$( ip -4 -o addr s dev ${INTERFACE} | grep -v secondary | cut -d" " -f7 | cut -d/ -f1 )

touch ${IMAGES}/${NAME}/etc/livenet/livenet.conf.override
echo "LIVENET_ROOT=${LIVENET_ROOT_IP}" >> ${IMAGES}/${NAME}/etc/livenet/livenet.conf.override



chroot ${R} /bin/bash -c "ln-mng --kernel"


echo > ${R}/etc/legal
mount -a
#
chroot ${R} /bin/bash -c "useradd -u 999 -g sudo -s /bin/bash --create-home livenet"
sleep 5
chroot ${R} /bin/bash -c "passwd -d livenet"
sleep 5
chroot ${R} /bin/bash -c "echo -e '\nunivr\nunivr' | passwd livenet"
#chroot ${R} /bin/bash -c "usermod -p $(openssl passwd -1 "univr") livenet"
sleep 5

chroot ${R} /bin/bash -c "apt install -y openssh-server parted bcache-tools gdisk"
#chroot ${R} /bin/bash -c "mkdir /root/.ssh"
#chroot ${R} /bin/bash -c "ssh-keygen -f /root/.ssh/id_rsa -t rsa -N ''"

cat > ${R}/etc/security/group.conf <<QWE
#*; *; *; Al0000-2400;users,audio,cdrom,floppy,plugdev,video,fuse,dip,kvm
QWE

#cat > ${R}/root/.ssh/config <<QWE
#Host *
#StrictHostKeyChecking no
#QWE

zfs set sharenfs="ro" ${LNPZFS}/${LNVZFS}/images/${NAME}
mount --bind ${IMAGES}/${NAME}/boot ${BOOT}/${NAME}
#TODO ADD mount in bind to /etc/fstab
chroot ${R} /bin/bash -c "echo FROM=${NAME} > /root/FROM"

cat >> /etc/fstab <<QQFS
#${R}/boot ${BOOT}/${NAME} none auto,bind 0 0
QQFS


end_time=$(date +%s)
echo "Elapsed time: $(( $((end_time - start_time))/60 )) min."
echo $end_time "End ${NAME} building" >> ${BASE}/livenet.log





do_snap ${NAME}

}

do_backup() {
   # set -x
    IMAGE=$1
 
    start_time=$(date +%s)

    if [ ! -d ${IMAGES}/${IMAGE} ]; then
        echo "ERROR: ${IMAGES}/${IMAGE} not present"
        exit 1
    fi

    #. ${IMAGES}/${IMAGE}/etc/livenet/livenet.conf
    . /etc/default/livenet
    #cd ${IMAGES}/${IMAGE}
    #rm -fR tmp/*
    
    LAST=$(zfs list -t snapshot -o name | grep ${IMAGE} | tail -1)

    mkdir -p ${BACKUP}/${IMAGE}
    
    if [ $(ls ${BACKUP}/${IMAGE}/ | wc -l) -gt 0 ]; then
        echo " rename old backup"
        #todo
        #check if variable is not empty!!!
        if [ $(ls ${BACKUP}/${IMAGE}/*.gz | wc -l) -gt 0 ]; then 
		 find ${BACKUP}/${IMAGE} -type f -exec mv '{}' '{}'.old \;
	fi
    fi

    echo "Build gold image from snapshot... "
    
    timestamp=$(echo ${LAST} | cut -d '@' -f 2 )
    zfs send ${LAST} | pigz >> ${BACKUP}/${IMAGE}/${timestamp}.gz
    
    
    
    end_time=$(date +%s)
    echo "Elapsed time: $(( $((end_time - start_time))/60 )) min."

    
}


#purge()  {

     #echo "Delete old snapshot"

    #if [ -d ${INCREASES}/${IMAGE} ]; then
    #   # echo "old ${BACKUP}/${IMAGE}/${IMAGE}.0.gz, delete old backup"
    #    if [ $( ls ${INCREASES}/${IMAGE} | wc -l) -gt 0 ]; then
	#	rm ${INCREASES}/${IMAGE}/*
    #    fi
    #fi
    
    #echo "Delete old snapshot"
   #if [ $(zfs list -t snapshot -o name | grep ${IMAGE} | tac | tail -n +2 | wc -l) -gt 0 ]; then
    #zfs list -t snapshot -o name | grep ${IMAGE} | tac | tail -n +2 | xargs -n 1 zfs destroy -vr
  #fi
#}
clone() {
set -x
    FROM=$1
    TO=$2
    zfs send $(zfs list -t snapshot -o name | grep ${FROM} | tail -1) | zfs recv ${LNPZFS}/${LNVZFS}/${LNIMAGES}/${TO}
    echo "update etc/fstab and /etc/schroot/schroot.conf"
    sync
    cat > ${IMAGES}/${TO}/root/${FROM} < QQFROM
        FROM=${TO}
    QQFROM
    zfs set sharenfs="ro" ${LNPZFS}/${LNVZFS}/images/${NAME}

}

do_chroot() {
    NAME=$1
    cd /
    . /etc/default/livenet
    
    schroot -c $NAME
  
 
}

rmimage() {

    NAME=$1
    TEST=$(zfs list | grep ${NAME})
    if [ -n "$TEST" ]; then
	umount ${BASE}/images/${NAME}/boot >> /dev/null 2>&1
	zfs umount ${LNPZFS}/${LNVZFS}/${LNIMAGES}/${NAME}
    	zfs destroy -r ${LNPZFS}/${LNVZFS}/${LNIMAGES}/${NAME}
   	if [ -d ${INCREASES}/${NAME} ]; then
		rm -r ${INCREASES}/${NAME}
	fi
	if [ -d ${BACKUP}/${NAME} ]; then
		rm -r ${BACKUP}/${NAME}
	fi
	echo "please update /etc/fstab and /etc/schroot/schroot.conf"
    else
	echo "$TEST not exist"
    fi
}


rmcommit() {
     NAME=$1
     TEST=$(zfs list -t snapshot -o name | grep ${NAME})
     if [ -n "$TEST" ]; then
	
	T2=$(zfs list -t snapshot -o name | grep ${NAME} | tail -2 | head -1 | cut -d"@" -f2)
	T=$(zfs list -t snapshot -o name | grep ${NAME} | tail -1 | cut -d"@" -f2)
	if [ ${T2} -ne ${T} ] && [ -n $T ] && [ -n $T2 ]; then
		rm ${INCREASES}/${NAME}/${T}.snapshot.gz
        	zfs destroy -r $(zfs list -t snapshot -o name | grep ${NAME} | tail -1 )
        	echo "please update /etc/fstab and /etc/schroot/schroot.conf"
	fi
    else
        echo "$TEST not exist"
    fi

}
do_lstcm() {
   NAME=$1
   echo "List of all commit for $NAME "
   zfs list -t snapshot -o name | grep ${NAME}
}
showchange(){
    IMAGE=$1
    #LAST2=$(zfs list -t snapshot -o name | grep ${IMAGE} | tail -2 | head -1)
    
    LAST2=$(zfs list -t snapshot -o name | grep ${IMAGE} | tail -1)
    LAST=$(zfs list -o name | grep ${IMAGE})
    zfs diff ${LAST2} ${LAST} > ${BASE}/${IMAGE}.changes
    cat ${BASE}/${IMAGE}.changes
    echo ""
    echo "You can read this output here: ${BASE}/${IMAGE}.changes"
}
#show list of images
do_list() {
   #find  ${IMAGES}  -maxdepth 1 -name "*-diff" -type d -exec basename \{\} \; | sed 's/-diff//' | sort
   ls ${IMAGES} | sort
}


check_overlay_busy () {
    ipath=$1
    REMOUNT=$2
    # aufs
    # auplink ${ipath}-dev flush
    sync
    umount ${ipath}-dev 2>/dev/null
    if [ ! $? = 0 ]; then
        echo "overlay mount point ${ipath} is busy, exit"
        exit 1
    fi
    umount ${ipath}-dev 2>/dev/null >/dev/null # bonifica multipli mount
    [ -n "${REMOUNT}" ] && mount ${ipath}-dev
}

do_reset() {
    IMAGE=$1
    #get the latest snapshot
    LAST_SNAP=$(zfs list -t snapshot -o name -s creation -r ${LNPZFS}/${LNVZFS}/${LNIMAGES}/${IMAGE} | tail -1)
    zfs rollback ${LAST_SNAP}

}

do_snap(){
    IMAGE=$1
    #timestamp=$(date +%s)
	timestamp=$(date +"%Y%m%d-%H:%M:%S")
    zfs snapshot ${LNPZFS}/${LNVZFS}/${LNIMAGES}/${IMAGE}@${timestamp}

}


do_commit() {
    IMAGE=$1
    #  SCRIPT=script.sh
    #timestamp=$(date +%s)
	timestamp=$(date +"%Y%m%d-%H:%M:%S")
    mkdir -p ${INCREASES}/${IMAGE}

    zfs snapshot ${LNPZFS}/${LNVZFS}/${LNIMAGES}/${IMAGE}@${timestamp}
    #check is ok
   # size_of_last_snap=$(zfs list -t snapshot | sort | tail -1 | awk '{print $2}')
    LAST2=$(zfs list -t snapshot -o name | grep ${IMAGE} | tail -2 | head -1)
    LAST=$(zfs list -t snapshot -o name | grep ${IMAGE} | tail -1)
     
   if [ $( zfs diff ${LAST2} ${LAST} | wc -l ) -lt 4  ]; then
	zfs destroy ${LNPZFS}/${LNVZFS}/${LNIMAGES}/${IMAGE}@${timestamp}
        echo "Commit is empty"
   	exit 1
    fi

    COUNTSNAP=$(zfs list -t snapshot | grep ${IMAGE} | wc -l)
    MIN=2
    if [ $MIN -gt $COUNTSNAP ]
    then
        echo "Is your first commit, make backup before"
        exit 0 
    fi

    LAST2=$(zfs list -t snapshot -o name | grep ${IMAGE}@ | tail -2 | head -1)
    LAST=$(zfs list -t snapshot -o name | grep ${IMAGE}@ | tail -1)
    SNAP=$(zfs list -t snapshot -o name | grep ${IMAGE}@ |tail -1 | awk -F"@" '{print $2}')
    zfs send -i $LAST2 $LAST | gzip >> ${INCREASES}/${IMAGE}/${SNAP}.snapshot.gz

}

do_create_states() {
    SIZE=$1
    . /etc/default/livenet

    if [ -f ${STATES} ]; then
        echo "ERROR: stop service and remove ${STATES} first"
        exit 1
    fi
    
    echo -n "Creating livenet states..."
    dd if=/dev/zero of=${STATES} bs=1M count=${SIZE} >/dev/null
    modprobe loop
    losetup /dev/loop0 ${STATES}
    mke2fs -j /dev/loop0 >/dev/null
    losetup -d /dev/loop0
    echo "Good, now is it possible to start this service"
}

do_iso() {
    tmp=/tmp/cdroot
    iso=${BOOT}/livenet.iso

    which xorriso >/dev/null
    if [ ! $? = 0 ]; then
        echo "Error: xorriso package not present. Install it with 'apt-get install xorriso"
        exit 1
    fi

    rm -fR ${tmp}
    rm -f ${iso}
    mkdir -p ${tmp}/boot/grub
    cp /usr/share/grub/unicode.pf2 ${tmp}/boot

    livenet_root_ip=$( ip -4 -o addr s dev ${INTERFACE} | grep -v secondary | cut -d" " -f7 | cut -d/ -f1 )
    echo "Detected IP=${livenet_root_ip} on ${INTERFACE} interface"

cat > ${tmp}/boot/grub/grub.cfg <<EOF
if [ -s \$prefix/grubenv ]; then
set have_grubenv=true
load_env
fi
insmod part_msdos
insmod ext2
insmod vbe
insmod png
insmod coreui 
if loadfont /boot/unicode.pf2 ; then
  set gfxmode=1024x768
  set gfxfont="Unifont Regular 16"
  load_video
  set gfxpayload=keep
  insmod gfxterm
  terminal_output gfxterm
fi

set timeout=100

submenu "boot from hd" {
menuentry "boot hd0,1" {
set root=‘(hd0,1)’
chainloader +1
}
menuentry "boot from hd1,1" –class os {
set root=‘(hd1,1)’
chainloader +1
}
}
EOF
    cd ${IMAGES}
    for i in *; do
        release=${i}

        mount | grep -q ${release}
        [ $? = 0 ] || continue

        mkdir -p ${tmp}/${release}
        cp ${BOOT}/${release}/initrd ${tmp}/${release}/initrd
        cp ${BOOT}/${release}/kernel ${tmp}/${release}/kernel
        
        for currprof in $( chroot ${IMAGES}/${release} /usr/sbin/ln-mng --profiles-list ); do
            echo "Processing: image=${release} profile=${currprof}"

cat >> ${tmp}/boot/grub/grub.cfg <<EOF
submenu "Livenet ${release} profile=${currprof}" {
menuentry "NFS profile=default root=${livenet_root_ip}:${IMAGES}/${release}" {

  set profile=${currprof}
  set livenet_root=${livenet_root_ip}:${IMAGES}/${release}

  set kernel=/${release}/kernel
  set initrd=/${release}/initrd

  search --set=kernel_path -f \$kernel
  set root=\$kernel_path
  linux (\$kernel_path)\$kernel ro livenet_root=\$livenet_root livenet_profile=\$profile
  initrd (\$kernel_path)\$initrd
  boot
  }

menuentry "INSTALL profile=${currprof} root=${livenet_root_ip}:${IMAGES}/${release}" {

  set profile=${currprof}
  set livenet_root=${livenet_root_ip}:${IMAGES}/${release}

  set kernel=/${release}/kernel
  set initrd=/${release}/initrd

  search --set=kernel_path -f \$kernel
  set root=\$kernel_path
  linux (\$kernel_path)\$kernel ro livenet_root=\$livenet_root livenet_profile=\$profile livenet_action=install livenet_action_end=reboot
  initrd (\$kernel_path)\$initrd
  boot
  }
}

EOF
        done # for currprof...
    done # for i...

    grub-mkrescue --output=${iso} --modules="linux ext2 fshelp ls boot" ${tmp} >/dev/null 2>&1
    if [ -f ${iso} ]; then
        echo "Created iso image ${iso}"
    else
        echo "ERROR"
    fi
}

while true; do
   case $1 in
      --help)
         usage
         exit 0
         ;;
      --version)
        apt-cache show livenet-server | sed -n 's/^Version:.\([0-9\.]\+\)-.*/\1/p'
        exit 0
         ;;
      --backup)
        do_backup ${NAME}
        exit $?
        ;;
      --commit)
        do_commit ${NAME}
        exit $?
        ;;
      --name)
        shift
        NAME=$1
        if [ ! -d ${IMAGES}/${NAME} ]; then
            echo "ERRORE: ${IMAGES}/${NAME} not present"
            exit 1
        fi
        echo "LASTIMAGE=${NAME}" > ${CACHE}
        do_chroot $NAME
        exit 0
	;;
      --log)
		shift
		shift
		NAME=$1
	if [ -z $NAME ]; then
		NAME=$LASTIMAGE
	fi
	if [ ! -d ${IMAGES}/${NAME} ]; then
            echo "ERRORE: ${IMAGES}/${NAME} not present"
            exit 1
	fi
        echo "LASTIMAGE=${NAME}" > ${CACHE}

	do_lstcm $NAME
	exit 0
	;;
      --rmimage)
	shift
	shift
	NAME=$1
	if [ -z $NAME ]; then
		echo "image name empty. Please retry with ln-image --rmimage <image name>"
		exit 1
	fi
	if [ ! -d ${IMAGES}/${NAME} ]; then
            echo "ERRORE: ${IMAGES}/${NAME} not present"
            exit 1
	fi
        #echo "LASTIMAGE=${NAME}" > ${CACHE}

	rmimage $NAME
	exit 0
	;;
      --rmcommit)
	shift
	shift
	NAME=$1
	if [ -z $NAME ]; then
		echo "image name empty. Please retry with ln-image --rmimage <image name>"
		exit 1
	fi
	if [ ! -d ${IMAGES}/${NAME} ]; then
            echo "ERRORE: ${IMAGES}/${NAME} not present"
            exit 1
	fi
        #echo "LASTIMAGE=${NAME}" > ${CACHE}

	rmcommit $NAME
	exit 0
	;;

      --cache)
        COPY_FROM_CACHE=true
        ;;
      --new-image)
        shift
        NAME=$1
        if [ -d ${IMAGES}/${NAME} ]; then
            echo "ERRORE: ${IMAGES}/${NAME} exists, remove it before"
            exit 1
        fi
        echo "LASTIMAGE=${NAME}" > ${CACHE}
        ;;
      --list)
        do_list
        exit 0
        ;;
      --rollback)
	shift
	shift
	NAME=$1
	if [ -z $NAME ]; then
		NAME=$LASTIMAGE
	fi


        if [ ! -d ${IMAGES}/${NAME} ]; then
            echo "ERRORE: ${IMAGES}/${NAME} not present"
            exit 1
        fi
        do_reset ${NAME}
        exit 0
        ;;
      --clone)
	set -x
	shift
	shift
	FROM=$1
	TO=$2
	if [ -n $FROM ] && [ -n $TO ]; then
	        if [ -d ${IMAGES}/${FROM} ]; then
		           clone ${FROM} ${TO}
		else
        	    echo "ERRORE: ${IMAGES}/${NAME} not present"
            	    exit 1

        	fi
        fi
        exit 0
        ;;
      --diff)
        showchange ${NAME}
        exit 0
	;;
      --returngold)
        do_go_gold ${NAME}
        exit 0
        ;;
      --create)
        do_create ${NAME}
        exit 0
        ;;
      --arch)
        shift
        ARCH=$1
        if [ "${ARCH}" != "amd64" ] && [ "${ARCH}" != "i386" ]; then
            usage 
            exit 1
        fi
        ;;
      --distr)
        shift
        DISTR=$1
        if [ "${DISTR}" != "bionic" ] && [ "${DISTR}" != "xenial" ]; then
            usage 
            exit 1
        fi
        ;;
	  --iso)
		do_iso
		exit 0
		;;
      *)
        shift
        if [ -n "$1" ]; then
            echo "Error: bad argument"
            exit 1
        fi
#        usage
        break
        ;;
   esac
   shift
done


do_chroot ${NAME}
