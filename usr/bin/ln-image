#!/bin/bash

PROGNAME=${0##*/}
VERSION=3
#set -x

. /etc/default/livenet

[ -f /etc/default/livenet.override ] && . /etc/default/livenet.override

#bootstrap cache
CACHE=${IMAGES}/.cache

# recall LASTIMAGE
if [ -f ${CACHE} ]; then
   . ${CACHE}
else
   LASTIMAGE=$(find  ${IMAGES}  -maxdepth 1 -type d -exec basename \{\} \; | sed 's/-diff//' | sort | head -n1)
   [ -n "${LASTIMAGE}" ] && echo "LASTIMAGE=${LASTIMAGE}" > ${CACHE}
fi

INTERFACE=${INTERFACE:=ens3}

logo(){

    printf '%s\n' '    __  _                           _   '
    printf '%s\n' '  / / (_)__   __ ___  _ __    ___ | |_ '
    printf '%s\n' ' / /  | |\ \ / // _ \| `_ \  / _ \| __|'
    printf '%s\n' '/ /___| | \ V /|  __/| | | ||  __/| |_ '
    printf '%s\n' '\____/|_|  \_/  \___||_| |_| \___| \__|'
    printf '%s\n' ''

}

usage()
{
logo

  cat << EOF
    Options:
    Example: Use 'ln-image alfa-lab' to enter in edit in "alfa-lab" image
                 'ln-image --new-image alfa-lab --distr bionic --create' 
                      to create a new image based on bionic
    Get info
        --list                          list available images
        --diff <image_name>             show differents from image and latest commit
        --log <image_name>              list of all commit 

    Edit and create
        --name <image_name>        		edit client image
        --commit <image_name>      		commit image changes
        --rollback <image_name>    		rollback image changes
        --new-image <image_name>  --create: 	create image
        --clone <image_name> <new_image>	create new image from exist image without commit
        --build-updates <image_name>        you can rebuild all update packages from first snapshot
        --rmcommit <image_name> 		remove latest commit
        --rmimage <image>			remove image

        Tools
        --backup <image_name>               build initial install image
        --iso                               build boot iso image
        --mountenv                          mount environments volume and folder
        --help :                            show this messge  
EOF
}

SHORTOPTS="hvn:"
LONGOPTS="help,version,backup,commit,snap,name:,list,iso,mountenv,rmcommit,rmimage,clone,rollback,diff,build-updates,log,create,arch:,distr:,new-image:,create-states:,cache"

ARGS=$(getopt -s bash --options $SHORTOPTS --longoptions $LONGOPTS --name $PROGNAME -- "$@" )
eval set -- "$ARGS"

NAME=${LASTIMAGE}
ARCH=amd64
DISTR=bionic

do_create() {

start_time=$(date +%s)

#set -x
IMAGE=$1
echo $start_time "Start ${IMAGE} building" >> ${LOGS}/livenet.log


R=${IMAGES}/${NAME}

echo "Create mount point for boot directory "
mkdir -p ${BOOT}/${NAME}
if [ -f ${IMAGES}/${NAME} ]; then
    echo " ${IMAGES}/${NAME} already exists"
    exit 1
fi

echo "Create volume for ZFS "
zfs create -o mountpoint=legacy ${LNIMAGES}/${NAME}
mkdir -p ${IMAGES}/${NAME}
mount.zfs ${LNIMAGES}/${NAME} ${IMAGES}/${NAME}
mount -o remount,exec,dev ${IMAGES}/${NAME}

# schroot configuration
grep -q "\[${NAME}\]" /etc/schroot/schroot.conf || (
cat >> /etc/schroot/schroot.conf <<QQSCHROOT

[${NAME}]
type=directory
profile=livenet
description=livenet gold
directory=${IMAGES}/${NAME}

QQSCHROOT

)

# image build
if [ -n "${COPY_FROM_CACHE}" ]; then
    cp -a ${IMAGES}/${NAME}.cache ${IMAGES}/${NAME}
else
    debootstrap --arch ${ARCH} ${DISTR} ${IMAGES}/${NAME} http://archive.ubuntu.com/ubuntu/
fi

# now make some operations to prepare nicer chroot

# hosts
cat > ${R}/etc/hosts <<QWK
127.0.0.1   localhost livenet-client
${HOSTIP} ln-server 
::1     localhost ip6-localhost ip6-loopback
ff02::1     ip6-allnodes
ff02::2     ip6-allrouters
QWK

# set sources.list
cat > ${R}/etc/apt/sources.list <<QWE
#############################################################
################### OFFICIAL UBUNTU REPOS ###################
#############################################################

###### Ubuntu Main Repos
deb http://archive.ubuntu.com/ubuntu/ ${DISTR} main restricted universe multiverse 

###### Ubuntu Update Repos
deb http://archive.ubuntu.com/ubuntu/ ${DISTR}-security main restricted universe multiverse 
deb http://archive.ubuntu.com/ubuntu/ ${DISTR}-updates main restricted universe multiverse 

###### Ubuntu Partner Repo
deb http://archive.canonical.com/ubuntu ${DISTR} partner
QWE

# for nfs mode
echo 'rootfs / rootfs rw 0 0' > ${R}/etc/mtab

# hostname is checked to check chroot environment (see /usr/sbin/policy-rc.d) 
echo livenet-client > ${R}/etc/hostname

# debian_chroot to have nicer prompt
#chroot ${R} lsb_release -c | awk '{print $2}' > ${R}/etc/debian_chroot
echo ${NAME} > ${R}/etc/debian_chroot

# adjust language locale environment
echo "Updating packages ..."
chroot ${R} apt-get -q update > /dev/null
chroot ${R} apt-get -y -q install locales dialog
chroot ${R} locale-gen en_GB.UTF-8
chroot ${R} locale-gen it_IT.UTF-8
chroot ${R} update-locale LANG=it_IT.UTF-8 LANGUAGE=it:en_US:en

# adjust timezone (later run dpkg-reconfigure tzdata)
echo Europe/Rome > ${R}/etc/timezone
cp ${R}/usr/share/zoneinfo/Europe/Rome ${R}/etc/localtime

# avoid startup of services into chroot
touch ${R}/usr/sbin/policy-rc.d
cat > ${R}/usr/sbin/policy-rc.d <<QWE
#!/bin/sh

# dpkg/apt not start any daemons when things are installed in the chroot

if [ ! "\\\`cat /etc/hostname\\\`" = "\\\`hostname\\\`" ]; then
    exit 101
fi
QWE
chmod +x ${R}/usr/sbin/policy-rc.d

#TODO
# add ppa livenet
#echo "deb http://ppa.launchpad.net/livenet/client/ubuntu bionic main" > ${R}/etc/apt/sources.list.d/livenet-client-xenial.list
#chroot ${R} gpg --ignore-time-conflict --no-options --no-default-keyring --homedir /tmp/tmp.rpBbGhvMOp --no-auto-check-trustdb --trust-model always --keyring /etc/apt/trusted.gpg.d/livenet-client.gpg --primary-keyring /etc/apt/trusted.gpg.d/livenet-client.gpg --keyserver keyserver.ubuntu.com --recv-keys 1A9F6095

echo "Updating packages ..."
#chroot ${R} apt-get -q update >/dev/null
export DEBIAN_FRONTEND=noninteractive
mount -t proc none ${R}/proc

chroot ${R} /bin/bash -c "apt-get -y install linux-generic"
umount ${R}/proc

#chroot ${R} apt-get -y install livenet-client
echo "Installing livenet-client"
chroot ${R} /bin/bash -c "apt install -y git wget curl vim nano rsync nfs-common initramfs-tools python-passlib pv screen byobu lsof pigz nfs-common libpam-script xloadimage conntrack zfsutils-linux zfs-initramfs"

chroot ${R} /bin/bash -c "git clone https://github.com/scipioni/livenet-client.git /tmp/livenet-client"

chroot ${R} /bin/bash -c "cd /tmp/livenet-client; git checkout bionic; rsync -av etc/ /etc/; rsync -av usr/ /usr/; rm -r /tmp/livenet-client/"

echo FROM=${NAME} > /root/FROM
systemctl enable ln-grub
systemctl enable ln-install
LIVENET_ROOT_IP=$( ip -4 -o addr s dev ${INTERFACE} | grep -v secondary | cut -d" " -f7 | cut -d/ -f1 )
touch ${IMAGES}/${NAME}/etc/livenet/livenet.conf.override
echo "LIVENET_ROOT=${LIVENET_ROOT_IP}" >> ${IMAGES}/${NAME}/etc/livenet/livenet.conf.override

touch ${IMAGES}/${NAME}/etc/fstab.local.default
echo /dev/zvol/rpool/swap none swap defaults 0 0 >> ${IMAGES}/${NAME}/etc/fstab.local.default

chroot ${R} /bin/bash -c "ln-mng --kernel"


echo > ${R}/etc/legal
mount -a
#
chroot ${R} /bin/bash -c "useradd -u 999 -g sudo -s /bin/bash --create-home livenet"
chroot ${R} /bin/bash -c "passwd -d livenet"
chroot ${R} /bin/bash -c "echo -e '\nunivr\nunivr' | passwd livenet"
#chroot ${R} /bin/bash -c "usermod -p $(openssl passwd -1 "univr") livenet"
chroot ${R} /bin/bash -c "useradd -u 499 -d /var/tmp install"
chroot ${R} /bin/bash -c "apt install -y openssh-server parted bcache-tools gdisk ratpoison"
#chroot ${R} /bin/bash -c "mkdir /root/.ssh"
#chroot ${R} /bin/bash -c "ssh-keygen -f /root/.ssh/id_rsa -t rsa -N ''"

cat > ${R}/etc/security/group.conf <<QWE
*; *; *; Al0000-2400;users,audio,cdrom,floppy,plugdev,video,fuse,dip,kvm
QWE

#cat > ${R}/root/.ssh/config <<QWE
#Host *
#StrictHostKeyChecking no
#QWE

zfs set sharenfs="ro" ${LNPZFS}/${LNVZFS}/images/${NAME}
mount --bind ${IMAGES}/${NAME}/boot ${BOOT}/${NAME}
#TODO ADD mount in bind to /etc/fstab
chroot ${R} /bin/bash -c "echo FROM=${NAME} > /root/FROM"

cat >> /etc/fstab <<QQFS
#${R}/boot ${BOOT}/${NAME} none auto,bind 0 0
QQFS


end_time=$(date +%s)
echo "Elapsed time: $(( $((end_time - start_time))/60 )) min."
echo $end_time "End ${NAME} building" >> ${BASE}/$NAME.log





do_snap ${NAME}

}

do_backup() {
   # set -x
    IMAGE=$1
    . /etc/default/livenet
    echo "Make backup for $IMAGE... "

    echo "Check available disk space..."
    FS=$(df -h ${BACKUPS} | awk '{print $1}' | tail -n +2)
    FST=$(stat -f -c %T ${BACKUPS})
    FREE=$(zfs list -r -o avail $FS | tail -n +2)
    SIZE=$(zfs list  -r -o used ${LNIMAGES}/${IMAGE} > /dev/null 2>&1 )
    if [ $? = 1 ]; then
        echo "Image ${IMAGE} is not available, check system with ln-image --check"
        exit 1
    fi
    SIZE=$(echo ${SIZE} | tail -n +2 )

    echo "File System used by backup folder: $FS, type ${FST}"
    echo "Available space: ${FREE}"
    echo "Size of image: ${SIZE}"
    SIZEN=${SIZE//[^0-9^,]/}
    FREE=${FREE//[^0-9^,]/}
    FREE=$(echo $FREE | cut -d "," -f1)
    if [ ! ${FREE} -gt $(printf "%.*f\n" 0 $SIZEN) ];then
        echo "There are no available space to make backup, please clean space"
    fi
    if [ ! -d ${IMAGES}/${IMAGE} ]; then
        echo "ERROR: ${IMAGES}/${IMAGE} not present"
        exit 1
    fi
    start_time=$(date +%s)

    LAST=$(zfs list -t snapshot -o name | grep ${IMAGE} | tail -1)

    mkdir -p ${BACKUPS}/${IMAGE}
    timestamp=$(echo ${LAST} | cut -d '@' -f 2 )
    OUT=${BACKUPS}/${IMAGE}/${IMAGE}_${timestamp}.gz
    zfs send ${LAST} | pv -c | pigz -c > ${OUT}
    end_time=$(date +%s)
    if [ $((end_time - start_time)) -le 60 ]; then
        echo "Elapsed time: $((end_time - start_time)) seconds "
    else
        echo "Elapsed time: $(( $((end_time - start_time))/60 )) min."
    fi
    echo "Size of backup: $(du -sh ${OUT} | cut -f1 )"
    
}


# purge()  {

#     echo "Delete old snapshot"

#     if [ -d ${UPDATES}/${IMAGE} ]; then
#        # echo "old ${BACKUP}/${IMAGE}/${IMAGE}.0.gz, delete old backup"
#         if [ $( ls ${UPDATES}/${IMAGE} | wc -l) -gt 0 ]; then
# 		rm ${UPDATES}/${IMAGE}/*
#         fi
#     fi
    
#     #echo "Delete old snapshot"
#    #if [ $(zfs list -t snapshot -o name | grep ${IMAGE} | tac | tail -n +2 | wc -l) -gt 0 ]; then
#     #zfs list -t snapshot -o name | grep ${IMAGE} | tac | tail -n +2 | xargs -n 1 zfs destroy -vr
#   #fi
# #}
do_clone() {
    echo "Cloning $FROM to new image $TO ..."
    echo "Get last commit from $FROM"
    LAST=$(zfs list -H -t snapshot -r -o name ${LNIMAGES}/${FROM} | tail -1 )
    if [ $? = 1 ]; then
        echo "Image are not available for cloning, check system with ln-image --check"
        exit 1
    fi

    #check available space
    FS=$(df -h ${IMAGES} | awk '{print $1}' | tail -n +2)
    FST=$(stat -f -c %T ${IMAGES})
    FREE=$(zfs list -H -r -o avail $FS )
    SIZE=$(zfs list -H -r -o used ${LNIMAGES}/${FROM} ) 
    echo "File System used by image repository folder: $FS, type ${FST}"
    echo "Available space: ${FREE}"
    echo "Size of image: ${SIZE}"
    SIZEN=${SIZE//[^0-9^,]/}
    FREE=$(echo $FREE | cut -d "," -f1)
    if [ ! ${FREE} -gt $(printf "%.*f\n" 0 $SIZEN) ];then
        echo "There are no available space to make clone, please clean space"
    fi
    ####check if there are other image with same name
    SIZE=$(zfs list  -r -o used ${LNIMAGES}/${TO} > /dev/null 2>&1 )
    CONFIRM="N"
    if [ $? = 0 ]; then
        read -p "There are another image with the same name of the target, do you whant to replace? Y/N [N]" CONFIRM
        case "$CONFIRM" in 
            y|Y ) echo "ok, continue";;
            n|N ) exit 1 ;;
            * ) echo "do nothing, exit" 
            exit 1;;
        esac
    fi
    zfs send $LAST | pv -c | zfs recv ${LNIMAGES}/${TO}
    if [ $? = 1 ]; then
        echo "oops, something wrong"
    fi
    zfs set mountpoint=legacy ${LNIMAGES}/${TO}
    mkdir -p ${BOOT}/${TO}
    echo "updating etc/default/livenet-fstab and /etc/schroot/schroot.conf ..."
    #/usr/bin/ln-image-srv
    if [ -d ${IMAGES}/$TO ] && [ -d ${BOOT}/$TO ]; then
            echo "OK image $TO was created"
    else
        echo "something wrong, please contact your system admin and check the system"
    fi
}

##
# rebuild manual mountpoint in /etc/default/livenet-fstab
#

##environment requirements mountpoint
do_mount() {
#set -x
    ZFSOPTS="zfs defaults,noatime 0 0"
    BINDOPTS="none auto,bind 0 0"
    cat > ${LIVENET_FSTAB} <<QWE
#############################################################
################### REQUIREMENTS ###################
#############################################################

###### UPDATE MOUNTPOINTS
# mountpoint for base
#${LNVZFS} ${BASE} ${ZFSOPTS}
# mountpoint for update
${LNUPDATES} ${UPDATES} ${ZFSOPTS}
# mountpoint for images
${LNIMAGES} ${IMAGES} ${ZFSOPTS}

# mountpoint for backups
${LNBACKUPS} ${BACKUPS} ${ZFSOPTS}
# mountpoint for vms
${LNVMS} ${VMS} ${ZFSOPTS}

# mountpoint for boot
mkdir -p ${BOOT}
# folder logs
mkdir -p ${LOGS}
QWE


    SLC=$(echo "${LNIMAGES}" | awk -F"/" '{print NF-1}')
    SLC=$((SLC+2))
    echo "# mountpoint for custom images" >> ${LIVENET_FSTAB}
    for i in $(zfs list -H -o name -r ${LNIMAGES} | tail -n +2 | cut -d "/" -f${SLC}); do
        echo "${LNIMAGES}/${i}      ${IMAGES}/${i}      ${ZFSOPTS}" >> ${LIVENET_FSTAB}
    done
    echo "# mountpoint for bind" >> ${LIVENET_FSTAB}
    for i in $(zfs list -H -o name -r ${LNIMAGES} | tail -n +2 | cut -d "/" -f${SLC}); do
        echo "${IMAGES}/${i}/boot      ${BOOT}/${i}      ${BINDOPTS}" >> ${LIVENET_FSTAB}
    done

    systemctl stop nfs-kernel-server
    systemctl stop tftpd-hpa
    #check if config file exist
    if [[ ! -f "${LIVENET_FSTAB}" ]]; then
        echo "${LIVENET_FSTAB} not exist"
        exit 1
    fi
    echo $LIVENET_FSTAB
    cat $LIVENET_FSTAB | while read line
    do
        set $line > /dev/null 2>&1
        #mount zfs dataset
        if [ "$3" == "zfs" ]; then
        #check if pool is available
            pool=$(echo $1 | cut -d "/" -f1)
            if [[ $pool == *"#"* ]]; then
                echo "It's there!"
                continue
            fi
            zpool status ${pool} > /dev/null 2>&1
            if [ $? -eq 1 ]; then
                echo "pool not available"
                exit 1
            fi
        #check if mountpoint is available
            if  [ ! -d $2 ]; then
                echo "montpoint not exist, create it"
                mkdir -p $2
                if [ $? -eq 1 ]; then
                    echo "can't create mountpoint, exit"
                    exit 1
                fi
            fi
        #after all check try to mount the volume, if one fail, exit
            echo "mount.zfs $1 $2"
            mount.zfs $1 $2 > /dev/null 2>&1
            if [ $? -eq 1 ]; then
                    echo "can't mount dataset, exit"
                    exit 1
            fi
        fi

        #mount in bind to boot directory
        if [ "$3" == "none" ]; then
            echo "mount --bind  $1 $2"
            mount.zfs $1 $2 > /dev/null 2>&1
        fi

    done 
    systemctl start nfs-kernel-server
    systemctl start tftpd-hpa
    echo ok, all running

}


do_chroot() {
#    do_mount
    NAME=$1
    cat /etc/schroot/schroot.conf | grep "\[$NAME\]"
    if [ $? == 1 ]; then
        echo -e "This options or image name is not valid. \nUse ln-image --help to get list of all options\n"
        exit 1
    fi
    cd /
    . /etc/default/livenet
    
    schroot -c $NAME
  
 
}

rmimage() {

    NAME=$1
    TEST=$(zfs list | grep ${NAME})
    if [ -n "$TEST" ]; then
	    umount ${BASE}/images/${NAME}/boot >> /dev/null 2>&1
	    zfs umount ${LNPZFS}/${LNVZFS}/${LNIMAGES}/${NAME}
    	zfs destroy -r ${LNPZFS}/${LNVZFS}/${LNIMAGES}/${NAME}
    	if [ -d ${UPDATES}/${NAME} ]; then
		    rm -r ${UPDATES}/${NAME}
	    fi
	    if [ -d ${BACKUP}/${NAME} ]; then
	    	rm -r ${BACKUP}/${NAME}
    	fi
	    echo "please update /etc/fstab and /etc/schroot/schroot.conf"
    else
	    echo "$TEST not exist"
    fi
}

#todo
rmcommit() {
     NAME=$1
     TEST=$(zfs list -t snapshot -o name | grep ${NAME})
     if [ -n "$TEST" ]; then
	
	T2=$(zfs list -t snapshot -o name | grep ${NAME} | tail -2 | head -1 | cut -d"@" -f2)
	T=$(zfs list -t snapshot -o name | grep ${NAME} | tail -1 | cut -d"@" -f2)
	if [ ${T2} -ne ${T} ] && [ -n $T ] && [ -n $T2 ]; then
		rm ${UPDATES}/${NAME}/${T}.snapshot.gz
        	zfs destroy -r $(zfs list -t snapshot -o name | grep ${NAME} | tail -1 )
        	echo "please update /etc/fstab and /etc/schroot/schroot.conf"
	fi
    else
        echo "$TEST not exist"
    fi

}

##
# show list of all commit, on zfs and with package
##
do_lstcm() {
   NAME=$1
   echo $2
   #
   echo -e "List of all commit for $NAME, check if exist a gz package for every zfs snapshot \n"
   PATH_UPDATE=${UPDATES}/$NAME/
   EXTENSION=snapshot.gz

   NUM_UPDATE=$(ls $PATH_UPDATE | wc -l)
   NUM_ZFS=$(zfs list -o name -t snapshot | grep $NAME | tail -n +2 | wc -l)
   CREATIONTIME=$(zfs list -o name -t snapshot | grep $NAME | head -1 | cut -d "@" -f2 )
   echo -e "The image - $NAME - was created $CREATIONTIME\n"
   echo -e "There are $NUM_ZFS snapshot on zfs dataset and there $NUM_UPDATE package ready to spread\n\n"
   
   i=1

   for snap in $(zfs list -o name -t snapshot | grep $NAME | grep -oE "[^/]+$" | cut -d "@" -f 2 | tail -n +2); do
        #SPACE=20
        #set -x
    
        if [ "$i" -eq "1" ]; then
            printf "%sID %9sZFS_SNAP%-18sFILE EXIST %5s FILE_SIZE\n"
        fi

        if [ -f ${PATH_UPDATE}/${snap}.${EXTENSION} ]; then

            FILE=${PATH_UPDATE}/${snap}.${EXTENSION}
            FILESIZE=$(du -sh ${FILE} | cut -d '/' -f 1 | sed -Er 's:[[:space:]]+: :g')
            printf "%s${i} %$((5-${#i}))s${snap} %18syes %$((17-${#FILESIZE}))s${FILESIZE}\n"
        else
            printf "%s${i} %$((5-${#i}))s${snap} %18s no\n"
        fi
        i=$((i+1))
    done

}


showchange(){
    IMAGE=$1
    if [ -z $IMAGE ]; then
        echo "Syntax error: ln-image --diff <imagename> "
        exit 1
    fi
    SIZE=$(zfs list  -r -o used ${LNIMAGES}/${IMAGE} > /dev/null 2>&1 )
    if [ $? = 1 ]; then
        echo "chek image on zfs"
        exit 1
    fi
    LAST=$(zfs list -H -o name -r ${LNIMAGES}/${IMAGE})
    LAST2=$(zfs list -H -t snapshot -o name -r ${LNIMAGES}/${IMAGE} | tail -1)
    mkdir -p ${BASE}/logs
    timestamp=$(date +"%Y%m%d-%H:%M:%S")
    echo "Image $IMAGE "
    echo "List of all changes between..."
    echo "date of last commit:      $(echo ${LAST2} | awk -F"@" '{print $2}')"
    echo "today:                    ${timestamp}"
    echo " "
    echo "waiting..."
    echo "M -> edit"
    echo "+ -> create"
    echo "- -> delete"
    echo ""
    zfs diff ${LAST2} ${LAST} | egrep -v "${IMAGES}/${IMAGE}/root/.bash_history" | egrep -v "${IMAGES}/${IMAGE}/etc/debian_chroot" 
    echo ""
}
#show list of images
do_list() {
   #find  ${IMAGES}  -maxdepth 1 -name "*-diff" -type d -exec basename \{\} \; | sed 's/-diff//' | sort
   #ls ${IMAGES} | sort
   #zfs  list -o name,used,sharenfs,mounted | grep /livenet/images/ |  grep -oE "[^/]+$"
   #echo -e "IMAGE DISK_USED SHARE_STATUS MOUNT_STATUS\n"$(zfs  list -o name,used,sharenfs,mounted | grep livenet/images/) | grep -oE "[^/]+$" | sed 's/ /.|./g' | column -s '.' -t
   


   
   echo "List of all images in the system "
   #printf "%sZFS_SNAP SIZE\n$(zfs  list -o name,used -t snapshot | grep alfa-lab)" |  grep -oE "[^/]+$" | sed -Er 's:[[:space:]]+: :g' |  sed 's/ /.|./g' | column -s '.' -t

   EXTENSION=.gz


   i=1
   #zfs list -o name -t snapshot| grep alfa | grep -oE "[^/]+$" | cut -d "@" -f 2 | tail -n +2
   #zfs list -o name,used -t snapshot | grep alfa-lab |  grep -oE "[^/]+$" | sed -Er 's:[[:space:]]+: :g' | tail -n +2

   for image in $(zfs list -o name | grep ${LNIMAGES} | grep -oE "[^/]+$" | cut -d "@" -f 2 | tail -n +2); do
  
        #print head of table
        if [ "$i" -eq "1" ]; then
            printf "%sID %4sIMAGE %14sNFS_ST %5sMNT_ST %2s DISK_USED%3sBACKUPS %3s UPDATES \n"
        fi
        
        #numbers of available updates in zfs
        ZFS_UPDATES=$(zfs list -t snapshot | grep $image | wc -l)
        N_UPDATES="0"
        #numbers of available update packages
        if [ -d ${UPDATES}/${image} ]; then
            N_UPDATES=$(ls ${UPDATES}/${image} | wc -l )
        fi
        N_BACKUPS="0"
        #numbers of available backups,quota disk, mount status, share nfs status
        if [ -d ${BACKUP}/${image} ]; then
            N_BACKUPS=$(ls ${BACKUP}/${image} | wc -l )
        fi
        DSK_USED=$(zfs list -o name,used | grep ${IMAGES}/${image} | awk '{print $2}')
        MOUNT_ST=$(zfs list -o name,mounted | grep ${IMAGES}/${image} | awk '{print $2}')
        SHARE_ST=$(zfs list -o name,sharenfs | grep ${IMAGES}/${image} | awk '{print $2}')
        printf "%s${i} %$((5-${#i}))s${image} %$((20-${#image}))s${SHARE_ST} %$((12-${#SHARE_ST}))s${MOUNT_ST}%$((10-${#MOUNT_ST}))s${DSK_USED}%$((15-${#DSK_USED}))s${N_BACKUPS}%$((10-${#N_BACKUPS}))s${N_UPDATES}\n"

        i=$((i+1))
   done
}

do_reset() {
    IMAGE=$NAME
    #check if image exist
    #get the latest snapshot
    LAST_SNAP=$(zfs list -t snapshot -o name -s creation -r ${LNIMAGES}/${IMAGE})
    if [ $? = 1 ]; then
        echo "ERROR: image does not exist"
        exit 1
    fi
    LAST_SNAP=$(zfs list -t snapshot -o name -s creation -r ${LNIMAGES}/${IMAGE} | tail -1)

    zfs rollback ${LAST_SNAP}
    if [ $? = 1 ]; then
      echo "oops, something was wrong. Check your zfs"
    fi 
}

do_build_updates() {
    IMAGE=$1
    
    if [ -n ${IMAGE} ]; then
        if [ ! $(zfs list -o name | grep ${IMAGE} | grep ${LNIMAGES} | wc -l ) -gt 0 ]; then
            echo "image not exists"
            exit 1
        fi
    fi
    N_SNAPSHOT=$(zfs list -t snapshot | grep $IMAGE | wc -l )
    if [ ${N_SNAPSHOT} -lt "2" ]; then
        echo "You have not commited yet, please commit!"
        exit 1
    fi
    N_UPDATES=0
    if [ ! -d ${UPDATES}/${IMAGE} ]; then
        echo "You have not commited yet, please commit!"
        mkdir -p ${UPDATES}/${IMAGE}
    fi
    N_UPDATES=$(ls ${UPDATES}/${IMAGE} | wc -l )
    if [ $((${N_SNAPSHOT}-1)) -eq ${N_UPDATES} ]; then
        echo "all is ok"
        exit 0
    fi

    echo "rebuild update package, all available package will be delete and rebuild..."
    echo "rebuild all packages of ${IMAGE}?"
    read -p "Press enter to continue"
    echo "There are ${N_UPDATES} updates now, for $(du -sh ${UPDATES}/${IMAGE}) "
    echo "waiting until clean all ..."
    for update in $(ls ${UPDATES}/${IMAGE}) ; do
        echo "delete ${UPDATES}/${IMAGE}/${update} $(du -sh ${UPDATES}/${IMAGE}/${update} | awk '{print $1}')  "
        rm ${UPDATES}/${IMAGE}/${update} 
    done
    echo "Rebuild update packages"
    #rebuild updates
       for i in `seq 1 ${N_SNAPSHOT} `;
        do
                if [ ${i} -lt ${N_SNAPSHOT} ]; then
                    LAST2=$(zfs list -t snapshot -o name | grep ${IMAGE} | tail -$((${N_SNAPSHOT}-${i})) | head -1)
                    LAST=$(zfs list -t snapshot -o name | grep ${IMAGE} | tail -$((${N_SNAPSHOT})) | head -1)
                    SNAP=$(zfs list -t snapshot -o name | grep ${IMAGE} | cut -d "@" -f 2 | tail -$((${N_SNAPSHOT}-${i})) | head -1).snapshot.gz
                    #echo ${SNAP}
                    #echo "diff from ${LAST2} and ${LAST} is ${SNAP}"
                    
                    zfs send -i ${LAST} ${LAST2} | gzip >> ${UPDATES}/${IMAGE}/${SNAP}
                fi
        done 

   # echo "Now there are ${N_SNAPSHOT} snaphots and $(ls ${UPDATES}/${IMAGE}/*.gz | wc -l) updates for $(du -sh ${UPDATES}/${IMAGE})"
}

do_snap(){
    IMAGE=$1
    #timestamp=$(date +%s)
	timestamp=$(date +"%Y%m%d-%H:%M:%S")
    zfs snapshot ${LNIMAGES}/${IMAGE}@${timestamp}

}


do_commit() {
    IMAGE=$1
    #  SCRIPT=script.sh
    #timestamp=$(date +%s)
	timestamp=$(date +"%Y%m%d-%H:%M:%S")
    mkdir -p ${UPDATES}/${IMAGE}

    zfs snapshot ${LNIMAGES}/${IMAGE}@${timestamp}
    #check is ok
   # size_of_last_snap=$(zfs list -t snapshot | sort | tail -1 | awk '{print $2}')
    LAST2=$(zfs list -t snapshot -o name | grep ${IMAGE} | tail -2 | head -1)
    LAST=$(zfs list -t snapshot -o name | grep ${IMAGE} | tail -1)
     
#    if [ $( zfs diff ${LAST2} ${LAST} | wc -l ) -lt 4  ]; then
# 	 zfs destroy ${LNPZFS}/${LNVZFS}/${LNIMAGES}/${IMAGE}@${timestamp}
#         echo "Commit is empty"
#    	exit 1
#    fi

    COUNTSNAP=$(zfs list -t snapshot | grep ${IMAGE} | wc -l)
    MIN=2
    if [ $MIN -gt $COUNTSNAP ]
    then
        echo "Is your first commit, make backup before"
        exit 0 
    fi
    echo "A package update for ${IMAGE} will be create..."
    LAST2=$(zfs list -t snapshot -o name | grep ${IMAGE}@ | tail -2 | head -1)
    LAST=$(zfs list -t snapshot -o name | grep ${IMAGE}@ | tail -1)
    SNAP=$(zfs list -t snapshot -o name | grep ${IMAGE}@ |tail -1 | awk -F"@" '{print $2}')
    zfs send -i $LAST2 $LAST | gzip >> ${UPDATES}/${IMAGE}/${SNAP}.snapshot.gz
    #zfs send -i $LAST2 $LAST >> ${UPDATES}/${IMAGE}/${SNAP}.snapshot

    echo "Update is done..."
    echo "Create log..."
    zfs diff ${LAST2} ${LAST} > ${LOGS}/${IMAGE}-${timestamp}.changes

}

do_create_states() {
    SIZE=$1
    . /etc/default/livenet

    if [ -f ${STATES} ]; then
        echo "ERROR: stop service and remove ${STATES} first"
        exit 1
    fi
    
    echo -n "Creating livenet states..."
    dd if=/dev/zero of=${STATES} bs=1M count=${SIZE} >/dev/null
    modprobe loop
    losetup /dev/loop0 ${STATES}
    mke2fs -j /dev/loop0 >/dev/null
    losetup -d /dev/loop0
    echo "Good, now is it possible to start this service"
}

do_iso() {
set -x
    tmp=/tmp/cdroot
    iso=${BOOT}/livenet.iso

    which xorriso >/dev/null
    if [ ! $? = 0 ]; then
        echo "Error: xorriso package not present. Install it with 'apt-get install xorriso"
        exit 1
    fi

    rm -fR ${tmp}
    rm -f ${iso}
    mkdir -p ${tmp}/boot/grub
    cp /usr/share/grub/unicode.pf2 ${tmp}/boot

    livenet_root_ip=$( ip -4 -o addr s dev ${INTERFACE} | grep -v secondary | cut -d" " -f7 | cut -d/ -f1 )
    echo "Detected IP=${livenet_root_ip} on ${INTERFACE} interface"

cat > ${tmp}/boot/grub/grub.cfg <<EOF
if [ -s \$prefix/grubenv ]; then
set have_grubenv=true
load_env
fi
insmod part_msdos
insmod ext2
insmod vbe
insmod png
insmod coreui 
if loadfont /boot/unicode.pf2 ; then
  set gfxmode=1024x768
  set gfxfont="Unifont Regular 16"
  load_video
  set gfxpayload=keep
  insmod gfxterm
  terminal_output gfxterm
fi

set timeout=100

submenu "boot from hd" {
menuentry "boot hd0,1" {
set root=‘(hd0,1)’
chainloader +1
}
menuentry "boot from hd1,1" –class os {
set root=‘(hd1,1)’
chainloader +1
}
}
EOF
    cd ${IMAGES}
    for i in *; do
        release=${i}

        mount | grep -q ${release}
        [ $? = 0 ] || continue

        mkdir -p ${tmp}/${release}
        cp ${BOOT}/${release}/initrd ${tmp}/${release}/initrd
        cp ${BOOT}/${release}/kernel ${tmp}/${release}/kernel
        
        for currprof in $( chroot ${IMAGES}/${release} /usr/sbin/ln-mng --profiles-list ); do
            echo "Processing: image=${release} profile=${currprof}"

cat >> ${tmp}/boot/grub/grub.cfg <<EOF
submenu "Livenet ${release} profile=${currprof}" {
menuentry "NFS profile=default root=${livenet_root_ip}:${IMAGES}/${release}" {

  set profile=${currprof}
  set livenet_root=${livenet_root_ip}:${IMAGES}/${release}

  set kernel=/${release}/kernel
  set initrd=/${release}/initrd

  search --set=kernel_path -f \$kernel
  set root=\$kernel_path
  linux (\$kernel_path)\$kernel ro livenet_root=\$livenet_root livenet_profile=\$profile
  initrd (\$kernel_path)\$initrd
  boot
  }

menuentry "INSTALL profile=${currprof} root=${livenet_root_ip}:${IMAGES}/${release}" {

  set profile=${currprof}
  set livenet_root=${livenet_root_ip}:${IMAGES}/${release}

  set kernel=/${release}/kernel
  set initrd=/${release}/initrd

  search --set=kernel_path -f \$kernel
  set root=\$kernel_path
  linux (\$kernel_path)\$kernel ro livenet_root=\$livenet_root livenet_profile=\$profile livenet_action=install livenet_action_end=reboot
  initrd (\$kernel_path)\$initrd
  boot
  }
}

EOF
        done # for currprof...
    done # for i...

    grub-mkrescue --output=${iso} --modules="linux ext2 fshelp ls boot" ${tmp} >/dev/null 2>&1
    if [ -f ${iso} ]; then
        echo "Created iso image ${iso}"
    else
        echo "ERROR"
    fi
}

while true; do
   case $1 in
      --help)
         usage
         exit 0
         ;;
      --version)
        echo "Version: $VERSION"
        exit 0
         ;;
      --backup)
        shift
        shift
        NAME=$1
        do_backup ${NAME}
        exit $?
        ;;
      --commit)
        shift
        shift
        NAME=$1
        if [ -z $NAME ]; then
            echo "Use 'ln-image --commit <imagename>', get name of available image with 'ln-image --list'"
            exit 1
        elif [ ${NAME} = "help" ]; then
            echo "no help available"
            exit 0
        elif [ ! -d ${IMAGES}/${NAME} ]; then
            echo "ERROR: Image ${NAME} not present"
            exit 1
        fi
        do_commit ${NAME}
        exit $?
        ;;
      --name)
        shift
        NAME=$1
        if [ $NAME == "help" ]; then
            echo -e "You can't use 'help' in the name of image. \nUse ln-image --name 'image-name' to enter in choot image\n"
            exit 1
        fi
        if [ ! -d ${IMAGES}/${NAME} ]; then
            echo "ERRORE: ${IMAGES}/${NAME} not present"
            exit 1
        fi
        echo "LASTIMAGE=${NAME}" > ${CACHE}
        do_chroot $NAME
        exit 0
        ;;
      --log)
        shift
        shift
        NAME=$1
        OPTIONS=$2
        if [ -z $NAME ]; then
            NAME=$LASTIMAGE
        fi
        if [ ${NAME} == "help" ]; then
            echo "help message"
            exit 0
        elif [ ! -d ${IMAGES}/${NAME} ]; then
            echo "ERRORE: ${IMAGES}/${NAME} not present"
            exit 1
        fi
        echo "LASTIMAGE=${NAME}" > ${CACHE}

        do_lstcm $NAME $OPTIONS
        exit 0
        ;;
      --build-updates)
        shift
        shift
        do_build_updates $1
        exit 0
        ;;
      --rmimage)
        shift
        shift
        NAME=$1
        if [ -z $NAME ]; then
            echo "image name empty. Please retry with ln-image --rmimage <image name>"
            exit 1
        fi
        if [ ! -d ${IMAGES}/${NAME} ]; then
                echo "ERRORE: ${IMAGES}/${NAME} not present"
                exit 1
        fi
            #echo "LASTIMAGE=${NAME}" > ${CACHE}

        rmimage $NAME
        exit 0
        ;;
      --rmcommit)
        shift
        shift
        NAME=$1
        if [ -z $NAME ]; then
            echo "image name empty. Please retry with ln-image --rmimage <image name>"
            exit 1
        fi
        if [ ! -d ${IMAGES}/${NAME} ]; then
                echo "ERRORE: ${IMAGES}/${NAME} not present"
                exit 1
        fi
            #echo "LASTIMAGE=${NAME}" > ${CACHE}

        rmcommit $NAME
        exit 0
        ;;

      --cache)
        COPY_FROM_CACHE=true
        ;;
      --new-image)
        shift
        NAME=$1
        if [ $NAME == "help" ]; then
            echo -e "You can't use 'help' in the name of image. \nUse ln-image --name 'image-name' to enter in choot image\n"
            exit 1
        fi
        if [ -d ${IMAGES}/${NAME} ]; then
            echo "ERRORE: ${IMAGES}/${NAME} exists, remove it before"
            exit 1
        fi
        echo "LASTIMAGE=${NAME}" > ${CACHE}
        ;;
      --list)
        do_list
        exit 0
        ;;
      --diff)
        shift
        shift
        NAME=$1
        #echo $NAME
        showchange ${NAME}
        exit 0
        ;;
      --rollback)
        shift
        shift
        NAME=$1
        if [ -z $NAME ]; then
            echo -e "Please, indicate an image to revert\n"
            echo -e "ln-image --rollback <imagename>\n"
            exit 1
        fi
        if [ ! -d ${IMAGES}/${NAME} ]; then
            echo "ERRORE: ${IMAGES}/${NAME} not present"
            exit 1
        fi
        do_reset ${NAME}
        exit 0
        ;;
        --clone)
        shift
        shift
        FROM=$1
        TO=$2
        if [ ! -z $FROM ] && [ ! -z $TO ]; then
                if [ -d ${IMAGES}/${FROM} ]; then
                    do_clone ${FROM} ${TO}
                else
                    echo "ERROR: Image '${FROM}' not present"
                    exit 1
                fi
        else
            echo "use ln-image --clone <imagesource> <imagetarget>"
            exit 1
        fi
        exit 0
        ;;
      --returngold)
        do_go_gold ${NAME}
        exit 0
        ;;
      --create)
        if [ $NAME == "help" ]; then
            echo -e "You can't use 'help' in the name of image. \nUse ln-image --name 'image-name' to enter in choot image\n"
            exit 1
        fi
        do_create ${NAME}
        exit 0
        ;;
      --distr)
        shift
        DISTR=$1
        if [ "${DISTR}" != "bionic" ] && [ "${DISTR}" != "xenial" ]; then
            usage 
            exit 1
        fi
        ;;
      --iso)
        do_iso
        exit 0
        ;;
      --mountenv)
        do_mount
        exit 0
        ;;
        *)
        shift
        if [ -n "$1" ]; then
            echo "Error: bad argument, use ln-image --help"
            exit 1
        fi
        break
        ;;
   esac
   shift
done

#do_chroot ${NAME}
